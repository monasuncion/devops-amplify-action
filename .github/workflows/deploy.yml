name: Deploy Amplify Environment

on:
  workflow_call:
    inputs:
      AWS_REGION: 
        required: false
        type: string
        default: 'ap-southeast-1'
      AMPLIFY_DOMAIN:
        required: false
        type: string
        default: ''
      CORS_PARAM:
        required: false
        type: string
        default: '/applabs/cors/allowedOrigins'
      CORS_HANDLER:
        required: false
        type: string
        default: 'applabs-cors-handler'
      AMPLIFY_WEBHOOK_ID:
        type: string
        required: false
    secrets:
      AMPLIFY_TOKEN:
        required: true
      STACK:
        required: true
      ROLE_TO_ASSUME: 
        required: true
      AMPLIFY_WEBHOOK_TOKEN:
        required: false

permissions:
  id-token: write
  contents: read

jobs:
  amplify:
    name: Configure Amplify Application
    runs-on: ubuntu-latest
    outputs:
      env-name: ${{ steps.env-name.outputs.environment }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      id: creds
      uses: aws-actions/configure-aws-credentials@master
      with:
        role-to-assume: ${{ secrets.ROLE_TO_ASSUME }}
        aws-region:  ${{ inputs.AWS_REGION }}

    - name: Configure Environment
      id: env-name
      env:
        REPO: ${{ github.repository }}
      run: |
        BRANCH=`sed -e 's#.*\/\(\)#\1#' <<< $GITHUB_REF`
        PROJECT=`sed -e 's#.*\/\(\)#\1#' <<< $GITHUB_REPOSITORY`
        ENVIRONMENT=$PROJECT-$BRANCH
        echo "Environment name: $ENVIRONMENT"
        echo "Project name: $PROJECT"
        echo "::set-output name=environment::$ENVIRONMENT"
        echo "::set-output name=project::$PROJECT"
        echo "::set-output name=branch::$BRANCH"

    - name: Configure Amplify Console with CloudFormation
      id: amplify-stack
      uses: aws-actions/aws-cloudformation-github-deploy@v1
      with:
        name: ${{ steps.env-name.outputs.environment }}
        template: ${{ secrets.STACK }}
        no-fail-on-empty-changeset: "1"
        parameter-overrides: >-
          Name=${{ steps.env-name.outputs.environment }},
          Repository=https://github.com/${{ github.repository }},
          Branch=${{ steps.env-name.outputs.branch }},
          OauthToken=${{ secrets.AMPLIFY_TOKEN }},
          Domain=${{ inputs.AMPLIFY_DOMAIN }},
          Project=${{ steps.env-name.outputs.project }}

    - name: Print AMplify Environment Default Domain
      env:
        DefaultDomain: ${{ steps.amplify-stack.outputs.DefaultDomain }}
      run: |
        [[ $DefaultDomain != '' ]] && echo "Default Domain: $DefaultDomain" || echo "Default Domain: None"

    - name: Amplify App Secrets
      env:
        EnvironmentName: ${{ steps.env-name.outputs.environment }}
        BRANCH: ${{ steps.env-name.outputs.branch }}
        PROJECT: ${{ steps.env-name.outputs.project }}
      run: |
        export AMPLIFY_ID=$(aws amplify list-apps --out json | jq -r '.apps[] | select(.name=="'$EnvironmentName'") | .appId')
        
        if [ $BRANCH == "master" ] || [ $BRANCH == "staging" ] || [ $BRANCH == "amplify-prod-deploy" ]
        then
          PARAM_PREFIX="/production/$PROJECT"
        else
          PARAM_PREFIX="/develop/$PROJECT"
        fi
        
        secrets=$(aws ssm describe-parameters --parameter-filters Key=Name,Option=BeginsWith,Values=$PARAM_PREFIX | jq -r '.Parameters[] | .Name')
        backend_environments=$(aws amplify list-backend-environments --app-id $AMPLIFY_ID | jq -r .backendEnvironments[] | jq -r .environmentName)

        secrets_list=(`echo $secrets | sed 's/" "/\n/g'`)
        backend_environment_list=(`echo $backend_environments | sed 's/" "/\n/g'`)

        for secret in "${secrets_list[@]}"
        do
            secrets_value=$(aws ssm get-parameter --name $secret --with-decryption | jq -r '.Parameter | .Value')
            parameter_name=$(echo $secret | sed -e 's/\/.*\///g')

            for backend in "${backend_environment_list[@]}"
            do  
                echo "/amplify/$AMPLIFY_ID/$backend/$parameter_name"
                aws ssm put-parameter --overwrite --name "/amplify/$AMPLIFY_ID/$backend/$parameter_name" --value "$secrets_value" --type "SecureString" 
            done
        done
      shell: bash

    - name: Update CORS
      env:
        DOMAIN: ${{ steps.amplify-stack.outputs.DefaultDomain }}
        CORS_PARAM: ${{ inputs.CORS_PARAM }}
        CORS_HANDLER: ${{ inputs.CORS_HANDLER }}
      run: |
        cors_list=$(aws ssm get-parameter --name $CORS_PARAM | jq -r '.Parameter | .Value')

        [[ $cors_list =~ .*"$DOMAIN".* ]] && exit 0
        
        cors_list+=",$DOMAIN"
        aws ssm put-parameter --name $CORS_PARAM --value $cors_list --type "String" --overwrite

        lambda_config=$(aws lambda get-function-configuration --function-name $CORS_HANDLER)
        revision_id=$(echo $lambda_config | jq -r '. | .RevisionId')
        allowed_headers=$(echo $lambda_config | jq -r '.Environment.Variables | .AllowedHeaders')
        aws lambda update-function-configuration --function-name $CORS_HANDLER --revision-id $revision_id --environment "Variables={AllowedOrigins='$cors_list',AllowedHeaders='$allowed_headers'}"

    - name: Trigger Amplify Deployment
      if: ${{inputs.AMPLIFY_WEBHOOK_ID != ''}}
      env:
        AMPLIFY_WEBHOOK_TOKEN: ${{ secrets.AMPLIFY_WEBHOOK_TOKEN }}
        AMPLIFY_WEBHOOK_ID: ${{ inputs.AMPLIFY_WEBHOOK_ID }}
        AWS_REGION:  ${{ inputs.AWS_REGION }}
      run: |
        curl -X POST -d {} "https://webhooks.amplify.'$AWS_REGION'.amazonaws.com/prod/webhooks?id='$AMPLIFY_WEBHOOK_ID'&token='$AMPLIFY_WEBHOOK_TOKEN'&operation=startbuild" -H "Content-Type:application/json"



    